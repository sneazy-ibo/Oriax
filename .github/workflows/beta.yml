name: Build APK and Notify Discord

on:
  push:
    branches:
      - dev
    paths-ignore:
      - '**/README.md'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CI: true

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Download last SHA artifact
      uses: dawidd6/action-download-artifact@v3
      with:
        workflow: beta.yml
        name: last-sha
        path: .
      continue-on-error: true

    - name: Get Commits Since Last Run
      run: |
        if [ -f last_sha.txt ]; then
          LAST_SHA=$(cat last_sha.txt)
        else
          LAST_SHA=$(git rev-list --max-parents=0 HEAD)
        fi
        echo "Commits since $LAST_SHA:"
        COMMIT_LOGS=$(git log $LAST_SHA..HEAD --pretty=format:"%H")
        LATEST_COMMIT_SHA=$(git rev-parse HEAD)
        echo "LATEST_COMMIT_SHA=${LATEST_COMMIT_SHA}" >> $GITHUB_ENV
        echo "COMMIT_LOGS=${COMMIT_LOGS}" >> $GITHUB_ENV
      shell: /usr/bin/bash -e {0}
      env:
        CI: true

    - name: Fetch commit details from GitHub API
      run: |
        COMMIT_LOG=""
        for commit_sha in $COMMIT_LOGS; do
          commit_data=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/commits/$commit_sha)
          author_name=$(echo "$commit_data" | jq -r '.commit.author.name')
          author_login=$(echo "$commit_data" | jq -r '.author.login')
          author_avatar_url=$(echo "$commit_data" | jq -r '.author.avatar_url')
          commit_message=$(echo "$commit_data" | jq -r '.commit.message' | head -n 1)
          COMMIT_LOG+="● ${commit_message} [~${author_name}](https://github.com/${author_login})%0A"
          if [ "$commit_sha" = "${LATEST_COMMIT_SHA}" ]; then
            LATEST_COMMIT_AUTHOR_LOGIN=$author_login
            LATEST_COMMIT_DATE=$(echo "$commit_data" | jq -r '.commit.author.date')
            AUTHOR_AVATAR_URL=$author_avatar_url
          fi
        done
        echo "COMMIT_LOG=${COMMIT_LOG}" >> $GITHUB_ENV
        echo "LATEST_COMMIT_AUTHOR_LOGIN=${LATEST_COMMIT_AUTHOR_LOGIN}" >> $GITHUB_ENV
        echo "LATEST_COMMIT_DATE=${LATEST_COMMIT_DATE}" >> $GITHUB_ENV
        echo "AUTHOR_AVATAR_URL=${AUTHOR_AVATAR_URL}" >> $GITHUB_ENV
      shell: /usr/bin/bash -e {0}
      env:
        COMMIT_LOGS: ${{ env.COMMIT_LOGS }}
        LATEST_COMMIT_SHA: ${{ env.LATEST_COMMIT_SHA }}

    - name: Save Current SHA for Next Run
      run: echo ${{ github.sha }} > last_sha.txt

    - name: Set variables
      run: |
        VER=$(grep -E -o "versionName \".*\"" app/build.gradle | sed -e 's/versionName //g' | tr -d '"')
        SHA=${{ github.sha }}
        SHORT_SHA=${SHA:0:7}
        VERSION="$VER+$SHORT_SHA"
        TAG_NAME="v$VER-$SHORT_SHA"
        echo "Version $VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

    - name: Setup JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: 17
        cache: gradle

    - name: List files in the directory
      run: ls -l

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Build with Gradle
      run: ./gradlew assembleGoogleAlpha

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.TAG_NAME }}
        release_name: "Release ${{ env.TAG_NAME }}"
        draft: false
        prerelease: true

    - name: Upload APK to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: app/build/outputs/apk/google/alpha/app-google-alpha.apk
        asset_name: app-google-alpha.apk
        asset_content_type: application/vnd.android.package-archive

    - name: Upload Embed to Discord
      shell: bash
      run: |
        commit_messages=$(echo "$COMMIT_LOG" | sed 's/%0A/\n/g; s/^/\n/')
        max_length=1900
        if [ ${#commit_messages} -gt $max_length ]; then
          commit_messages="${commit_messages:0:$max_length}... (truncated)"
        fi
        contentbody=$( jq -nc --arg title "New Alpha-Build dropped" --arg description "<@951737931159187457>" --arg commits "$commit_messages" --arg footer "Version ${{ env.VERSION }}" --arg timestamp "${{ env.LATEST_COMMIT_DATE }}" --arg thumbnail "${{ env.AUTHOR_AVATAR_URL }}" --arg username "PRE-TESTER" --arg avatar_url "https://i.imgur.com/xizROdr.png" '{"content": null, "embeds": [{"title": $title, "description": $description, "color": 15532323, "fields": [{"name": "Commits:", "value": $commits, "inline": true}], "footer": {"text": $footer}, "timestamp": $timestamp, "thumbnail": {"url": $thumbnail}}], "username": $username, "avatar_url": $avatar_url, "attachments": []}' )
        curl -H "Content-Type: application/json" -X POST -d "$contentbody" ${{ secrets.DISCORD_WEBHOOK }}
      env:
        COMMIT_LOG: ${{ env.COMMIT_LOG }}
        VERSION: ${{ env.VERSION }}
        LATEST_COMMIT_DATE: ${{ env.LATEST_COMMIT_DATE }}
        AUTHOR_AVATAR_URL: ${{ env.AUTHOR_AVATAR_URL }}

    - name: Upload APK to Discord
      shell: bash
      run: |
        curl -F "dantotsu_debug=@app/build/outputs/apk/google/alpha/app-google-alpha.apk" ${{ secrets.DISCORD_WEBHOOK }}

    - name: Upload Current SHA as Artifact
      uses: actions/upload-artifact@v2
      with:
        name: last-sha
        path: last_sha.txt

    - name: Delete Old Pre-Releases
      id: delete-pre-releases
      uses: sgpublic/delete-release-action@master
      with:
        pre-release-drop: true
        pre-release-keep-count: 3
        pre-release-drop-tag: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
